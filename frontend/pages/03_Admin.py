import os
import requests
import streamlit as st

st.set_page_config(page_title="AI Tutor ‚Äî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", page_icon="üõ†Ô∏è", layout="wide")
BACKEND = os.getenv("BACKEND_URL", "http://localhost:8000")


def api_headers():
    token = st.session_state.get("token")
    return {"Authorization": f"Bearer {token}"} if token else {}


def api_post(path, json_body):
    r = requests.post(f"{BACKEND}{path}", json=json_body, headers=api_headers())
    if not r.ok:
        try:
            st.error(f"API error {r.status_code}: {r.json().get('detail')}")
        except Exception:
            st.error(f"API error {r.status_code}: {r.text}")
        r.raise_for_status()
    return r


def api_get(path):
    r = requests.get(f"{BACKEND}{path}", headers=api_headers())
    if not r.ok:
        try:
            st.error(f"API error {r.status_code}: {r.json().get('detail')}")
        except Exception:
            st.error(f"API error {r.status_code}: {r.text}")
        r.raise_for_status()
    return r


st.title("üõ†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")

if "token" not in st.session_state or not st.session_state.token:
    st.warning("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É (–∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä).")
    st.stop()

me = api_get("/api/me").json()
if me.get("role") != "admin":
    st.error("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    st.stop()

st.success(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {me['username']}")

st.header("–¢–µ–º—ã")
with st.form("create_topic"):
    name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã", placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä, linear_algebra_ext")
    submitted = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É")
    if submitted and name.strip():
        t = api_post("/api/admin/topics", {"name": name.strip()}).json()
        st.success(f"–¢–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞: {t['name']} (–≤–æ–ø—Ä–æ—Å–æ–≤: {t['question_count']})")

topics = api_get("/api/topics").json()
if not topics:
    st.info("–¢–µ–º –ø–æ–∫–∞ –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –≤—ã—à–µ.")
    st.stop()

topic_labels = {f"{t['name']}  ‚Äî  ({t['question_count']} –≤–æ–ø—Ä–æ—Å–æ–≤)": t for t in topics}
selected_label = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É", list(topic_labels.keys()))
selected_topic = topic_labels[selected_label]

st.subheader("–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ–º—É")
with st.form("add_question"):
    text = st.text_area("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", height=140)
    ideal = st.text_area("–ò–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", height=100)
    diff = st.selectbox("–°–ª–æ–∂–Ω–æ—Å—Ç—å (–æ–ø—Ü.)", ["", "easy", "medium", "hard"], index=0)
    submitted_q = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
    if submitted_q and text.strip():
        payload = {"text": text.strip(), "ideal_answer": (ideal or None), "difficulty": (diff or None)}
        q = api_post(f"/api/admin/topics/{selected_topic['id']}/questions", payload).json()
        st.success(f"–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω (id={q['id']}).")

st.subheader("–í–æ–ø—Ä–æ—Å—ã —Ç–µ–º—ã (–ø–µ—Ä–≤—ã–µ 50)")
try:
    qs = api_get(f"/api/topics/{selected_topic['id']}/questions").json()
    if qs:
        for i, q in enumerate(qs[:50], start=1):
            st.markdown(f"**#{i}.** {q['text']}")
            if q.get("ideal_answer"):
                with st.expander("–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"):
                    st.write(q["ideal_answer"])
    else:
        st.info("–í —ç—Ç–æ–π —Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
except Exception:
    st.info("–ù–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.")
