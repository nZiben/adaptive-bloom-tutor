import os
import requests
import streamlit as st

st.set_page_config(page_title="AI Tutor", page_icon="üéì", layout="wide")

BACKEND = os.getenv("BACKEND_URL", "http://localhost:8000")

# --------- Auth helpers ---------


def api_headers():
    token = st.session_state.get("token")
    return {"Authorization": f"Bearer {token}"} if token else {}


def api_post(path, json_body):
    r = requests.post(f"{BACKEND}{path}", json=json_body, headers=api_headers())
    if not r.ok:
        st.error(f"API error {r.status_code}: {r.text}")
        r.raise_for_status()
    return r


def api_get(path):
    r = requests.get(f"{BACKEND}{path}", headers=api_headers())
    if not r.ok:
        st.error(f"API error {r.status_code}: {r.text}")
        r.raise_for_status()
    return r


# --------- Sidebar ---------

st.sidebar.title("AI-Tutor")

if "token" not in st.session_state:
    st.session_state.token = None
if "session_id" not in st.session_state:
    st.session_state.session_id = None
if "history" not in st.session_state:
    st.session_state.history = []
if "meta" not in st.session_state:
    st.session_state.meta = {}

with st.sidebar.container():
    if st.session_state.token:
        me = api_get("/api/me").json()
        st.sidebar.success(f"–í–æ—à–ª–∏ –∫–∞–∫: {me['username']}")
        if st.sidebar.button("–í—ã–π—Ç–∏"):
            st.session_state.token = None
            st.session_state.session_id = None
            st.session_state.history = []
            st.session_state.meta = {}
            st.rerun()
    else:
        tab_login, tab_reg = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
        with tab_login:
            email = st.text_input("Email", key="login_email")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="login_pass")
            if st.button("–í–æ–π—Ç–∏"):
                r = api_post("/api/auth/login", {"email": email, "password": password})
                st.session_state.token = r.json()["token"]
                st.success("–ì–æ—Ç–æ–≤–æ!")
                st.rerun()
        with tab_reg:
            reg_email = st.text_input("Email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", key="reg_email")
            username = st.text_input("–ò–º—è", key="reg_username")
            reg_pass = st.text_input("–ü–∞—Ä–æ–ª—å (–º–∏–Ω. 6 —Å–∏–º–≤–æ–ª–æ–≤)", type="password", key="reg_pass")
            if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
                r = api_post(
                    "/api/auth/register",
                    {"email": reg_email, "username": username, "password": reg_pass},
                )
                st.session_state.token = r.json()["token"]
                st.success("–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω!")
                st.rerun()

mode = st.sidebar.selectbox("–†–µ–∂–∏–º", ["exam", "diagnostic"])
topic = st.sidebar.selectbox("–¢–µ–º–∞", ["linear_algebra", "probability"])
student_id = st.sidebar.text_input("Student ID (–æ–ø—Ü.)", "user-1")

if st.session_state.get("token"):
    with st.sidebar.expander("–ú–æ–∏ —Å–µ—Å—Å–∏–∏", expanded=False):
        try:
            sessions = api_get("/api/me/sessions").json()
            for s in sessions[:10]:
                st.markdown(
                    f"- {s['started_at'][:16]} ‚Ä¢ **{s['topic']}** ‚Ä¢ {s['mode']} ‚Ä¢ {s['status']}  \n`{s['id']}`"
                )
        except Exception:
            pass

col1, col2 = st.columns([2, 1])

with col1:
    st.header("–ß–∞—Ç —Å —Ç—å—é—Ç–æ—Ä–æ–º")
    if st.session_state.session_id is None:
        if st.button("–ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é"):
            r = api_post(
                "/api/session/start",
                {"mode": mode, "topic": topic, "student_id": student_id},
            )
            data = r.json()
            st.session_state.session_id = data["session_id"]
            st.session_state.history = [{"role": "assistant", "content": data["first_question"]}]
    chat_placeholder = st.container()
    with chat_placeholder:
        for m in st.session_state.history:
            if m["role"] == "assistant":
                st.markdown(f"**–¢—å—é—Ç–æ—Ä:** {m['content']}")
            else:
                st.markdown(f"**–í—ã:** {m['content']}")

    if st.session_state.session_id:
        if "user_input" not in st.session_state:
            st.session_state.user_input = ""
        user_inp = st.text_input("–í–∞—à –æ—Ç–≤–µ—Ç:", key="user_input")
        if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å") and user_inp.strip():
            st.session_state.history.append({"role": "user", "content": user_inp})
            r = api_post(
                f"/api/session/{st.session_state.session_id}/message", {"message": user_inp}
            )
            data = r.json()
            st.session_state.history.append({"role": "assistant", "content": data["reply"]})
            st.session_state.meta = data["meta"]
            # –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤–æ–ø—Ä–æ—Å–µ
            st.session_state.user_input = ""
            st.rerun()

with col2:
    st.subheader("–°—Ç–∞—Ç—É—Å/–º–µ—Ç—Ä–∏–∫–∏")
    meta = st.session_state.get("meta", {})
    st.json(meta if meta else {"info": "–ù–∞—á–Ω–∏—Ç–µ —Å–µ—Å—Å–∏—é"})
    if st.session_state.get("session_id"):
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"):
            r = api_get(f"/api/session/{st.session_state.session_id}/report")
            if r.ok:
                rep = r.json()
                st.image(rep["png_url"])
                st.markdown(f"[–°–∫–∞—á–∞—Ç—å JSON-–ø—Ä–æ—Ñ–∏–ª—å]({rep['json_url']})")
        if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–∏"):
            mr = api_get(f"/api/session/{st.session_state.session_id}/metrics").json()
            st.write(f"–°—Ä–µ–¥–Ω–∏–π score: {mr.get('avg_score')}")
            st.write("Bloom counts:")
            st.json(mr.get("bloom_counts", {}))
            st.write("SOLO counts:")
            st.json(mr.get("solo_counts", {}))
        if st.button("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é"):
            api_post(f"/api/session/{st.session_state.session_id}/complete", {})
            st.success("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

st.divider()
st.subheader("–¢–µ—Å—Ç–±–µ–Ω—á")
tb_topic = st.selectbox("–¢–µ–º–∞ —Ç–µ—Å—Ç–±–µ–Ω—á–∞", ["linear_algebra", "probability"], key="tb_topic")
q1 = st.text_area("–í–æ–ø—Ä–æ—Å #1", value="State Bayes' theorem.")
a1 = st.text_area("–ò–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç #1", value="Bayes' theorem: P(A|B)=P(B|A)P(A)/P(B).")
if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–±–µ–Ω—á (1 –∫–µ–π—Å)"):
    tb = api_post(
        "/api/testbench/run",
        {"topic": tb_topic, "cases": [{"question": q1, "ideal_answer": a1}]},
    ).json()
    st.json(tb)
